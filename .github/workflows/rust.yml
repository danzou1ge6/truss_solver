name: Rust

on:
  push:
    branches: [ "master" ]
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }} 
    steps:
      - name: Create release
        id: create_release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: latest
          draft: false
          prerelease: false
    
  build:
    name: Build
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-musl 
            exe-name: truss_solver-x86_64-unknown-linux-musl
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
            exe-name: truss_solver-x86_64-apple-darwin
          - build: windows
            os: windows-2019
            rust: nightly-x86_64-msvc
            target: x86_64-pc-windows-msvc
            exe-name: truss_solver-x86_64-pc-windows-msvc.exe
      fail-fast: false 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Install FLTK Dependencies
        if: matrix.build == 'linux'
        run: |
          sudo apt-get install g++ cmake git make
          sudo apt-get install libx11-dev libxext-dev libxft-dev libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev libpango1.0-dev libgl1-mesa-dev libglu1-mesa-dev

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          RUST_BACKTRACE: 1
          CC: gcc
          CXX: g++

      - name: Strip binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/${{ matrix.target }}/release/truss_solver"

      - name: Copy Artifect to Workdir
        shell: bash
        run: |
          if [ "${{ matrix.build }}" = "windows" ]; then
            cp "./target/${{ matrix.target }}/release/truss_solver.exe" ./${{ matrix.exe-name }}
          else
            cp "./target/${{ matrix.target }}/release/truss_solver" ./${{ matrix.exe-name }}
          fi
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-package
          path: |
            ./${{ matrix.exe-name }} 
            
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: ${{ matrix.exe-name }}
          asset_path: ./${{ matrix.exe-name }}
          asset_content_type: application/octet-stream
          
